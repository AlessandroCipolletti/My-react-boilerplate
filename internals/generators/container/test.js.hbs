/**
 *
 * Tests for {{ properCase name }}
 *
 * @see https://github.com/react-boilerplate/react-boilerplate/tree/master/docs/testing
 *
 */

import React from 'react'
import { render } from 'react-testing-library'
import { Provider } from 'react-redux'
import { createMemoryHistory } from 'history'
import { compose } from 'redux'
{{#if wantMessages}}
import { IntlProvider, injectIntl } from 'react-intl'
{{/if}}
// import 'jest-dom/extend-expect' // add some helpful assertions

// Import de Theme Provider
import { ThemeProvider } from 'styled-components'
import Theme from 'common/Theme'

import configureStore from 'utils/configureStore'

import {{ properCase name }}, { withConnect } from '../index'

{{#if wantMessages}}
import { DEFAULT_LOCALE } from '../../../utils/i18n'
{{/if}}

describe('<{{ properCase name }} />', () => {
  const history = createMemoryHistory()
  const store = configureStore({}, history)

{{#if wantMessages}}
  const ComponentWithCompose = compose(
    withConnect,
    injectIntl,
  )({{ properCase name }})
{{else}}
  const ComponentWithCompose = compose(
    withConnect,
  )({{ properCase name }})
{{/if}}

const renderComponent = (Component, props = {}) => (
  render(
{{#if wantActionsAndReducer}}
{{#if wantMessages}}
    <IntlProvider locale={DEFAULT_LOCALE}>
      <Provider store={store}>
        <ThemeProvider theme={Theme}>
          <ComponentWithCompose {...props} />
        </ThemeProvider>
      </Provider>
    </IntlProvider>,
{{else}}
    <Provider store={store}>
      <ThemeProvider theme={Theme}>
        <ComponentWithCompose {...props} />
      </ThemeProvider>
    </Provider>,
{{/if}}
{{else}}
{{#if wantMessages}}
    <IntlProvider locale={DEFAULT_LOCALE}>
      <ThemeProvider theme={Theme}>
        <ComponentWithCompose {...props} />
      </ThemeProvider>
    </IntlProvider>,
{{else}}
    <ThemeProvider theme={Theme}>
      <ComponentWithCompose {...props} />
    </ThemeProvider>,
{{/if}}
{{/if}}
  )
)





  it('Expect to not log errors in console', () => {
    const spy = jest.spyOn(global.console, 'error')
    const dispatch = jest.fn()

    renderComponent({ dispatch })

    expect(spy).not.toHaveBeenCalled()
  })

  it('Expect to have additional unit tests specified', () => {
    expect(true).toEqual(false)
  })

  /**
   * Unskip this test to use it
   *
   * @see {@link https://jestjs.io/docs/en/api#testskipname-fn}
   */
  it.skip('Should render and match the snapshot', () => {
    const {
      container: { firstChild },
    } = renderComponent()

    expect(firstChild).toMatchSnapshot()
  })
})
